FROM ghcr.io/seisscoped/container-base
#just for reference. works, but is kind of large and outdated

# Install system dependencies, including Python and MPI for Python bindings
RUN apt-get update \
    && apt-get install -y \
    bzip2 \
    cmake \
    g++ \
    gcc \
    gfortran \
    libgomp1 \
    libnuma-dev \
    libnuma1 \
    libocct-data-exchange-7.5 \
    libocct-data-exchange-dev \
    libocct-foundation-7.5 \
    libocct-foundation-dev \
    libocct-modeling-algorithms-7.5 \
    libocct-modeling-algorithms-dev \
    libocct-modeling-data-7.5 \
    libocct-modeling-data-dev \
    libopenblas-base \
    libopenblas-dev \
    libreadline-dev \
    libtbb2 \
    libyaml-cpp-dev \
    pkg-config \
    zlib1g \
    zlib1g-dev \
    python3 \
    python3-pip \
    python3-dev \
    libxcursor1 \
    libxinerama1 \
    libxft2 \
    python3-setuptools \
    && apt-get clean

# libxcursor1, libxinerama1 and libxft2 for python gmsh

RUN python3 -m pip install --upgrade pip setuptools

# Install pybind11
RUN python3 -m pip install pybind11 pytest pytest-cov

# Set the working directory for the image
WORKDIR /workspace

# Copy the requirements.txt into the Docker image
COPY requirements.txt /workspace/requirements.txt

# Install python requirements
RUN pip install --upgrade pip && pip install -r requirements.txt

# Clean unnecessary Docker layers

RUN docker-clean

RUN mkdir -p /home/tools

WORKDIR /tmp

ENV PATH="/opt/intel/compilers_and_libraries_2020.1.217/linux/mpi/intel64/bin:/home/tools/bin:${PATH}" \
    LD_LIBRARY_PATH="/opt/intel/compilers_and_libraries_2020.1.217/linux/mpi/intel64/libfabric/lib:/opt/intel/compilers_and_libraries_2020.1.217/linux/mpi/intel64/lib/release:/opt/intel/compilers_and_libraries_2020.1.217/linux/mpi/intel64/lib" 

# Install HDF5
RUN wget --progress=bar:force:noscroll https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.2/src/hdf5-1.12.2.tar.bz2 \
    && tar -xvf hdf5-1.12.2.tar.bz2 \
    && cd hdf5-1.12.2 \
    && CFLAGS="-fPIC" CC=mpicc FC="mpif90 --std=f95" ./configure --enable-parallel --with-zlib --disable-shared --prefix /home/tools \
    && make -j$(nproc) && make install

# Install NetCDF
RUN wget --progress=bar:force:noscroll https://downloads.unidata.ucar.edu/netcdf-c/4.9.2/netcdf-c-4.9.2.tar.gz \
    && tar -xvf netcdf-c-4.9.2.tar.gz \
    && cd netcdf-c-4.9.2 \
    && CFLAGS="-fPIC" CC=h5pcc ./configure --enable-shared=no --prefix=/home/tools --disable-dap --disable-byterange \
    && make -j$(nproc) && make install

# Install ASAGI
RUN git clone --recursive https://github.com/TUM-I5/ASAGI.git \
    && cd ASAGI \
    && git checkout 4a29bb8c54904431ac4032ebfcf3512c8659a2f3 \
    && mkdir build && cd build \
    && CC=mpicc CXX=mpicxx cmake .. -DCMAKE_INSTALL_PREFIX=/home/tools -DSHARED_LIB=off -DSTATIC_LIB=on -DNONUMA=on -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
    && make -j$(nproc) && make install

# Install Lua with -fPIC
RUN wget --progress=bar:force:noscroll https://www.lua.org/ftp/lua-5.4.7.tar.gz \
    && tar -xzvf lua-5.4.7.tar.gz \
    && cd lua-5.4.7 \
    && make linux CC=mpicc MYCFLAGS="-fPIC" \
    && make local \
    && cp -r install/* /home/tools \
    && cd ..

# Install EASI with Python bindings
RUN git clone https://github.com/SeisSol/easi \
    && cd easi \
    && mkdir build && cd build \
    && CC=mpicc CXX=mpicxx cmake .. -DEASICUBE=OFF -DLUA=ON -DCMAKE_PREFIX_PATH=/home/tools -DCMAKE_INSTALL_PREFIX=/home/tools -DASAGI=ON -DIMPALAJIT=OFF .. \
    && make -j$(nproc) && make install

# Install Python bindings for EASI
RUN cd /tmp/easi && \
    mkdir -p build && cd build && \
    CC=mpicc CXX=mpicxx cmake .. -DEASICUBE=OFF -DLUA=ON -DCMAKE_PREFIX_PATH=/home/tools -DCMAKE_INSTALL_PREFIX=/home/tools -DASAGI=ON -DIMPALAJIT=OFF -DPYTHON_BINDINGS=ON .. \
    && make -j$(nproc) && make install

ENV LD_LIBRARY_PATH="/opt/conda/lib:${LD_LIBRARY_PATH}" \
    PYTHONPATH="/home/tools/lib/cmake/easi/python_wrapper:${PYTHONPATH}"

WORKDIR /home
