# SPDX-FileCopyrightText: 2024 SeisSol Group
#
# SPDX-License-Identifier: BSD-3-Clause
# SPDX-LicenseComments: Full text under /LICENSE and /LICENSES/
#
# SPDX-FileContributor: Author lists in /AUTHORS and /CITATION.cff

# ## boilerplate

FROM ubuntu:24.04

ENV TZ=UTC
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update -y && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends --fix-missing \
    apt-utils \
    build-essential \
    bash \
    wget \
    git \
    curl \
    tar \
    unzip \
    patch \
    gzip \
    bzip2 \
    file \
    gfortran \
    coreutils \
    pkg-config \
    automake \
    make \
    cmake \
    gnupg \
    cmake-curses-gui \
    libreadline-dev \
    libxml2-dev \
    software-properties-common \
    python3.11 python3-dev python3-pip \
    libyaml-cpp-dev libopenmpi-dev ninja-build && \
    apt-get -y update

# ## IO
RUN python3 -m pip install --upgrade pip setuptools

# Install pybind11
RUN python3 -m pip install pybind11 pytest pytest-cov

# Set the working directory for the image
WORKDIR /workspace

# Copy the requirements.txt into the Docker image
COPY requirements.txt /workspace/requirements.txt

# Install python requirements
RUN pip install --upgrade pip && pip install -r requirements.txt

# HDF5
RUN wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.3/src/hdf5-1.12.3.tar.bz2 && \
    tar -xf hdf5-1.12.3.tar.bz2 && cd hdf5-1.12.3 && \
    CPPFLAGS="-fPIC ${CPPFLAGS}" CC=mpicc CXX=mpicxx ./configure --enable-parallel --prefix=/usr --with-zlib --disable-shared && \
    make -j $(nproc) install && \
    cd .. && rm -rf hdf5-1.12.3

# Netcdf
RUN wget https://downloads.unidata.ucar.edu/netcdf-c/4.9.2/netcdf-c-4.9.2.tar.gz && \
    tar -xf netcdf-c-4.9.2.tar.gz && cd netcdf-c-4.9.2 && \
    CFLAGS="-fPIC ${CFLAGS}" CC=h5pcc ./configure --enable-shared=no --prefix=/usr --disable-dap --disable-byterange && \
    make -j $(nproc) install && \
    cd .. && rm -rf netcdf-c-4.9.2

# ## input data

# ASAGI
RUN git clone --recursive --depth 1 https://github.com/TUM-I5/ASAGI.git gitbuild && \
    git checkout 4a29bb8c54904431ac4032ebfcf3512c8659a2f3 &&\
    mkdir -p gitbuild/build && cd gitbuild/build && \
    cmake .. -DSHARED_LIB=OFF -DFORTRAN_SUPPORT=OFF -DSTATIC_LIB=ON -GNinja && \
    ninja install && \
    cd ../.. && rm -rf gitbuild

# Lua
RUN wget https://www.lua.org/ftp/lua-5.3.6.tar.gz && \
    tar -xzvf lua-5.3.6.tar.gz && cd lua-5.3.6/ &&\
    make linux && make local && \
    cp -r install/* /usr && \
    cd .. && rm -rf lua-5.3.6

# easi
RUN git clone --recursive --depth 1 --branch v1.4.0 https://github.com/SeisSol/easi.git gitbuild && \
    mkdir -p gitbuild/build && cd gitbuild/build && \
    cmake .. -GNinja -DLUA=ON -DIMPALAJIT=ON -DASAGI=ON -DPYTHON_BINDINGS=ON && \
    ninja install && \
    cd ../.. && rm -rf gitbuild

# ## setup and cleanup

WORKDIR /app

COPY . /app

RUN chmod +x /usr/bin/*

RUN apt-get clean && rm -rf /var/lib/apt/lists/*
